// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: category.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Category service

func NewCategoryEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Category service

type CategoryService interface {
	Query(ctx context.Context, in *QueryRequest, opts ...client.CallOption) (*QueryResponse, error)
	Add(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error)
	Edit(ctx context.Context, in *EditRequest, opts ...client.CallOption) (*EditResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
}

type categoryService struct {
	c    client.Client
	name string
}

func NewCategoryService(name string, c client.Client) CategoryService {
	return &categoryService{
		c:    c,
		name: name,
	}
}

func (c *categoryService) Query(ctx context.Context, in *QueryRequest, opts ...client.CallOption) (*QueryResponse, error) {
	req := c.c.NewRequest(c.name, "Category.Query", in)
	out := new(QueryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) Add(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error) {
	req := c.c.NewRequest(c.name, "Category.Add", in)
	out := new(AddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) Edit(ctx context.Context, in *EditRequest, opts ...client.CallOption) (*EditResponse, error) {
	req := c.c.NewRequest(c.name, "Category.Edit", in)
	out := new(EditResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "Category.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Category service

type CategoryHandler interface {
	Query(context.Context, *QueryRequest, *QueryResponse) error
	Add(context.Context, *AddRequest, *AddResponse) error
	Edit(context.Context, *EditRequest, *EditResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
}

func RegisterCategoryHandler(s server.Server, hdlr CategoryHandler, opts ...server.HandlerOption) error {
	type category interface {
		Query(ctx context.Context, in *QueryRequest, out *QueryResponse) error
		Add(ctx context.Context, in *AddRequest, out *AddResponse) error
		Edit(ctx context.Context, in *EditRequest, out *EditResponse) error
		Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
	}
	type Category struct {
		category
	}
	h := &categoryHandler{hdlr}
	return s.Handle(s.NewHandler(&Category{h}, opts...))
}

type categoryHandler struct {
	CategoryHandler
}

func (h *categoryHandler) Query(ctx context.Context, in *QueryRequest, out *QueryResponse) error {
	return h.CategoryHandler.Query(ctx, in, out)
}

func (h *categoryHandler) Add(ctx context.Context, in *AddRequest, out *AddResponse) error {
	return h.CategoryHandler.Add(ctx, in, out)
}

func (h *categoryHandler) Edit(ctx context.Context, in *EditRequest, out *EditResponse) error {
	return h.CategoryHandler.Edit(ctx, in, out)
}

func (h *categoryHandler) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.CategoryHandler.Delete(ctx, in, out)
}
